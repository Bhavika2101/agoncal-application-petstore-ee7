// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Test with a valid parameter that exists in the map.
   - Input: A valid parameter key that exists in the request parameter map.
   - Expected Output: The corresponding value of the given parameter from the map.

2. Scenario: Test with a parameter that does not exist in the map.
   - Input: A parameter key that does not exist in the request parameter map.
   - Expected Output: Null, as the map should return null when the given key does not exist.

3. Scenario: Test with a null parameter.
   - Input: Null as a parameter key.
   - Expected Output: Null, as the map should return null when the given key is null.

4. Scenario: Test with an empty string as a parameter.
   - Input: An empty string as a parameter key.
   - Expected Output: Null, as the map should return null when the given key is an empty string.

5. Scenario: Test with a parameter having spaces.
   - Input: A parameter key with spaces.
   - Expected Output: The corresponding value of the given parameter from the map if it exists, else null.

6. Scenario: Test with a parameter that is case sensitive.
   - Input: A parameter key in a different case than what exists in the map.
   - Expected Output: Null, as the map should return null when the given key does not exist in the same case.

7. Scenario: Test when FacesContext.getCurrentInstance() returns null.
   - Input: Any parameter key.
   - Expected Output: Null, as the FacesContext instance is null and thus the map cannot be retrieved.

8. Scenario: Test with special characters in the parameter.
   - Input: A parameter key with special characters.
   - Expected Output: The corresponding value of the given parameter from the map if it exists, else null.

9. Scenario: Test with a large size input parameter.
   - Input: A very large size parameter key.
   - Expected Output: The corresponding value of the given parameter from the map if it exists, else null.

10. Scenario: Test with a parameter key that exists multiple times in the map.
    - Input: A parameter key that exists multiple times in the map.
    - Expected Output: The first corresponding value of the given parameter from the map.
*/
package org.agoncal.application.petstore.view;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class AbstractBean_getParam_af741b4b12_Test {

    @Mock
    private FacesContext facesContext;

    @Mock
    private ExternalContext externalContext;

    /**
     * Test for getParam method when parameter is present in the request map
     */
    @Test
    public void testGetParam_Present() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("testParam", "testValue");

        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        AbstractBean abstractBean = new AbstractBean();
        String result = abstractBean.getParam("testParam");

        assertEquals("testValue", result);
    }

    /**
     * Test for getParam method when parameter is not present in the request map
     */
    @Test
    public void testGetParam_NotPresent() {
        Map<String, String> requestParameterMap = new HashMap<>();

        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        AbstractBean abstractBean = new AbstractBean();
        String result = abstractBean.getParam("testParam");

        assertEquals(null, result);
    }
}
