// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Check if the function returns the correct value for an existing parameter.
   - Given a parameter that exists in the request parameter map
   - When the function getParam() is called with this parameter
   - Then it should return the correct value associated with this parameter

2. Scenario: Check if the function returns null for a non-existing parameter.
   - Given a parameter that does not exist in the request parameter map
   - When the function getParam() is called with this parameter
   - Then it should return null

3. Scenario: Check if the function handles null input properly.
   - Given null as a parameter
   - When the function getParam() is called with this parameter
   - Then it should return null

4. Scenario: Check if the function handles empty string input properly.
   - Given an empty string as a parameter
   - When the function getParam() is called with this parameter
   - Then it should return null

5. Scenario: Check if the function works properly with special characters in the parameter name.
   - Given a parameter name that includes special characters and exists in the request parameter map
   - When the function getParam() is called with this parameter
   - Then it should return the correct value associated with this parameter

6. Scenario: Check if the function works properly with a large number of parameters in the request parameter map.
   - Given a large number of parameters in the request parameter map
   - When the function getParam() is called with any parameter
   - Then it should return the correct value associated with this parameter in a reasonable time

7. Scenario: Check if the function works properly with case-sensitive parameters.
   - Given a parameter that exists in the request parameter map and is case-sensitive
   - When the function getParam() is called with this parameter in a different case
   - Then it should return null

8. Scenario: Check if the function works properly when FacesContext is not yet initialized.
   - Given the FacesContext is not yet initialized
   - When the function getParam() is called
   - Then it should throw a NullPointerException or return null depending on how the FacesContext.getCurrentInstance() is implemented.
*/
package org.agoncal.application.petstore.view;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import java.util.HashMap;
import java.util.Map;
import static org.junit.Assert.*;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class AbstractBean_getParam_af741b4b12_Test {

    @Mock
    private FacesContext facesContext;

    @Mock
    private ExternalContext externalContext;

    private AbstractBean abstractBean = new AbstractBean();

    @Test
    public void testGetParam_ExistingParam() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("testParam", "testValue");
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);
        assertEquals("testValue", abstractBean.getParam("testParam"));
    }

    @Test
    public void testGetParam_NonExistingParam() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("testParam", "testValue");
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);
        assertNull(abstractBean.getParam("nonExistingParam"));
    }

    @Test
    public void testGetParam_NullInput() {
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(new HashMap<>());
        assertNull(abstractBean.getParam(null));
    }

    @Test
    public void testGetParam_EmptyStringInput() {
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(new HashMap<>());
        assertNull(abstractBean.getParam(""));
    }

    @Test
    public void testGetParam_SpecialCharactersInParamName() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("@#$%", "testValue");
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);
        assertEquals("testValue", abstractBean.getParam("@#$%"));
    }

    @Test
    public void testGetParam_CaseSensitiveParams() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("testParam", "testValue");
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);
        assertNull(abstractBean.getParam("TESTPARAM"));
    }

    @Test(expected = NullPointerException.class)
    public void testGetParam_FacesContextNotInitialized() {
        abstractBean.getParam("testParam");
    }
}
