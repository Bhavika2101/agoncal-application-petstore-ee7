// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Test with a valid string number parameter
   Description: Pass a valid string number parameter to the getParamId method and verify it returns the correct Long value.
   
2. Scenario: Test with a string number parameter that exceeds the range of Long
   Description: Pass a string number parameter that exceeds the maximum range of Long to the getParamId method and verify it throws a NumberFormatException.

3. Scenario: Test with a negative string number parameter
   Description: Pass a negative string number parameter to the getParamId method and verify it returns the correct negative Long value.

4. Scenario: Test with a non-numeric string parameter
   Description: Pass a non-numeric string parameter to the getParamId method and verify it throws a NumberFormatException.

5. Scenario: Test with a null parameter
   Description: Pass a null parameter to the getParamId method and verify it throws a NullPointerException.

6. Scenario: Test with an empty string parameter
   Description: Pass an empty string parameter to the getParamId method and verify it throws a NumberFormatException.

7. Scenario: Test with a string number parameter having leading or trailing spaces
   Description: Pass a string number parameter having leading or trailing spaces to the getParamId method and verify it returns the correct Long value.

8. Scenario: Test with a string number parameter having decimal points
   Description: Pass a string number parameter having decimal points to the getParamId method and verify it throws a NumberFormatException.

9. Scenario: Test with a string number parameter having special characters
   Description: Pass a string number parameter having special characters to the getParamId method and verify it throws a NumberFormatException.

10. Scenario: Test with a large string number parameter
    Description: Pass a large string number parameter to the getParamId method and verify it returns the correct Long value without any performance issues.
*/
package org.agoncal.application.petstore.view;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import java.util.HashMap;
import java.util.Map;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

public class AbstractBean_getParamId_c151932853_Test {

    @Mock
    private FacesContext facesContext;

    @Mock
    private ExternalContext externalContext;

    private AbstractBean abstractBean;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        abstractBean = new AbstractBean();
        when(facesContext.getExternalContext()).thenReturn(externalContext);
    }

    @Test
    public void testGetParamId() {
        Map<String, String> parameters = new HashMap<>();
        parameters.put("test", "12345");
        when(externalContext.getRequestParameterMap()).thenReturn(parameters);
        assertEquals(Long.valueOf(12345), abstractBean.getParamId("test"));
    }

    @Test(expected = NumberFormatException.class)
    public void testGetParamIdInvalidNumber() {
        Map<String, String> parameters = new HashMap<>();
        parameters.put("test", "invalid");
        when(externalContext.getRequestParameterMap()).thenReturn(parameters);
        abstractBean.getParamId("test");
    }

    @Test(expected = NullPointerException.class)
    public void testGetParamIdNullParameter() {
        Map<String, String> parameters = new HashMap<>();
        when(externalContext.getRequestParameterMap()).thenReturn(parameters);
        abstractBean.getParamId(null);
    }

    @Test
    public void testGetParamIdNonExistingParameter() {
        Map<String, String> parameters = new HashMap<>();
        when(externalContext.getRequestParameterMap()).thenReturn(parameters);
        assertEquals(null, abstractBean.getParamId("nonExisting"));
    }
}
