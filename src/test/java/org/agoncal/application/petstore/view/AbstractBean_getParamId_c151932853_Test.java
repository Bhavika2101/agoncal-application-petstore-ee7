// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Null Parameter
   Description: Test the function with a null parameter. The expected outcome would be a NullPointerException.

2. Scenario: Empty String Parameter
   Description: Test the function with an empty string as a parameter. The expected result would be a NumberFormatException.

3. Scenario: Non-numeric String Parameter
   Description: Test the function with a non-numeric string parameter. It should throw a NumberFormatException.

4. Scenario: Numeric String Parameter
   Description: Test the function with a numeric string parameter. The function should return the correct Long value.

5. Scenario: String Parameter with Leading or Trailing Spaces
   Description: Test the function with a string parameter that includes leading or trailing spaces. The function should ignore the spaces and return the correct Long value.

6. Scenario: String Parameter with Embedded Spaces
   Description: Test the function with a string parameter that includes spaces between numbers. It should throw a NumberFormatException.

7. Scenario: String Parameter Representing a Negative Number
   Description: Test the function with a string parameter that represents a negative number. The function should return the correct negative Long value.

8. Scenario: String Parameter Representing a Number Greater than Long.MAX_VALUE
   Description: Test the function with a string parameter representing a number greater than Long.MAX_VALUE. It should throw a NumberFormatException.

9. Scenario: String Parameter Representing a Number Less than Long.MIN_VALUE
   Description: Test the function with a string parameter representing a number less than Long.MIN_VALUE. It should throw a NumberFormatException.

10. Scenario: String Parameter Representing a Decimal Number
    Description: Test the function with a string parameter representing a decimal number. It should throw a NumberFormatException.
*/
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.Mockito.when;

public class AbstractBean_getParamId_c151932853_Test {

    @Mock
    private FacesContext facesContext;

    @Mock
    private ExternalContext externalContext;

    private AbstractBean abstractBean;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        abstractBean = new AbstractBean();
    }

    @Test(expected = NullPointerException.class)
    public void testGetParamIdNullParameter() {
        abstractBean.getParamId(null);
    }

    @Test(expected = NumberFormatException.class)
    public void testGetParamIdEmptyString() {
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("", "");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParams);

        abstractBean.getParamId("");
    }

    @Test(expected = NumberFormatException.class)
    public void testGetParamIdNonNumericString() {
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param", "nonNumericString");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParams);

        abstractBean.getParamId("param");
    }

    @Test
    public void testGetParamIdNumericString() {
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param", "123");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParams);

        Long result = abstractBean.getParamId("param");

        assertEquals(Long.valueOf(123), result);
    }

    @Test
    public void testGetParamIdStringWithSpaces() {
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param", " 123 ");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParams);

        Long result = abstractBean.getParamId("param");

        assertEquals(Long.valueOf(123), result);
    }

    @Test(expected = NumberFormatException.class)
    public void testGetParamIdStringWithEmbeddedSpaces() {
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param", "12 3");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParams);

        abstractBean.getParamId("param");
    }

    @Test
    public void testGetParamIdNegativeNumber() {
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param", "-123");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParams);

        Long result = abstractBean.getParamId("param");

        assertEquals(Long.valueOf(-123), result);
    }

    @Test(expected = NumberFormatException.class)
    public void testGetParamIdGreaterThanMaxLong() {
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param", "9223372036854775808");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParams);

        abstractBean.getParamId("param");
    }

    @Test(expected = NumberFormatException.class)
    public void testGetParamIdLessThanMinLong() {
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param", "-9223372036854775809");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParams);

        abstractBean.getParamId("param");
    }

    @Test(expected = NumberFormatException.class)
    public void testGetParamIdDecimalNumber() {
        Map<String, String> requestParams = new HashMap<>();
        requestParams.put("param", "123.45");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParams);

        abstractBean.getParamId("param");
    }
}
