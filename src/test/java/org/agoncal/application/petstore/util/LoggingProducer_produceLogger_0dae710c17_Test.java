// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Verify that the Logger object is produced when a valid InjectionPoint is provided.
   - Given a valid InjectionPoint
   - When the produceLogger method is called with this InjectionPoint
   - Then a Logger object should be created and returned
   - And the Logger name should be equal to the name of the class from which the InjectionPoint was derived

2. Scenario: Verify that the Logger object is not produced when an invalid InjectionPoint is provided.
   - Given an invalid InjectionPoint (e.g., null)
   - When the produceLogger method is called with this InjectionPoint
   - Then a NullPointerException should be thrown

3. Scenario: Verify that the Logger object is not produced when the InjectionPoint member is null.
   - Given an InjectionPoint with a null member
   - When the produceLogger method is called with this InjectionPoint
   - Then a NullPointerException should be thrown

4. Scenario: Verify that the Logger object is not produced when the InjectionPoint member's declaring class is null.
   - Given an InjectionPoint with a member whose declaring class is null
   - When the produceLogger method is called with this InjectionPoint
   - Then a NullPointerException should be thrown

5. Scenario: Verify that the Logger object is produced with the correct class name when the InjectionPoint member's declaring class has a name.
   - Given an InjectionPoint with a member whose declaring class has a name
   - When the produceLogger method is called with this InjectionPoint
   - Then a Logger object should be created and returned
   - And the Logger name should be equal to the name of the declaring class

6. Scenario: Verify that the Logger object is produced with the default Logger name when the InjectionPoint member's declaring class does not have a name.
   - Given an InjectionPoint with a member whose declaring class does not have a name
   - When the produceLogger method is called with this InjectionPoint
   - Then a Logger object should be created and returned
   - And the Logger name should be equal to the default Logger name ("global")
*/
package org.agoncal.application.petstore.util;

import javax.enterprise.inject.spi.InjectionPoint;
import java.util.logging.Logger;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class LoggingProducer_produceLogger_0dae710c17_Test {

    @Test
    public void testProduceLoggerValidInjectionPoint() {
        // Given a valid InjectionPoint
        InjectionPoint mockInjectionPoint = mock(InjectionPoint.class);
        when(mockInjectionPoint.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.LoggingProducer");

        // When the produceLogger method is called with this InjectionPoint
        LoggingProducer producer = new LoggingProducer();
        Logger logger = producer.produceLogger(mockInjectionPoint);

        // Then a Logger object should be created and returned
        assertNotNull(logger);

        // And the Logger name should be equal to the name of the class from which the InjectionPoint was derived
        assertEquals("org.agoncal.application.petstore.util.LoggingProducer", logger.getName());
    }

    @Test(expected = NullPointerException.class)
    public void testProduceLoggerInvalidInjectionPoint() {
        // Given an invalid InjectionPoint (e.g., null)
        InjectionPoint mockInjectionPoint = null;

        // When the produceLogger method is called with this InjectionPoint
        LoggingProducer producer = new LoggingProducer();
        producer.produceLogger(mockInjectionPoint);

        // Then a NullPointerException should be thrown
    }

    @Test(expected = NullPointerException.class)
    public void testProduceLoggerNullMemberInjectionPoint() {
        // Given an InjectionPoint with a null member
        InjectionPoint mockInjectionPoint = mock(InjectionPoint.class);
        when(mockInjectionPoint.getMember()).thenReturn(null);

        // When the produceLogger method is called with this InjectionPoint
        LoggingProducer producer = new LoggingProducer();
        producer.produceLogger(mockInjectionPoint);

        // Then a NullPointerException should be thrown
    }

    @Test(expected = NullPointerException.class)
    public void testProduceLoggerNullDeclaringClassInjectionPoint() {
        // Given an InjectionPoint with a member whose declaring class is null
        InjectionPoint mockInjectionPoint = mock(InjectionPoint.class);
        when(mockInjectionPoint.getMember().getDeclaringClass()).thenReturn(null);

        // When the produceLogger method is called with this InjectionPoint
        LoggingProducer producer = new LoggingProducer();
        producer.produceLogger(mockInjectionPoint);

        // Then a NullPointerException should be thrown
    }

    @Test
    public void testProduceLoggerValidClassNameInjectionPoint() {
        // Given an InjectionPoint with a member whose declaring class has a name
        InjectionPoint mockInjectionPoint = mock(InjectionPoint.class);
        when(mockInjectionPoint.getMember().getDeclaringClass().getName()).thenReturn("ValidClassName");

        // When the produceLogger method is called with this InjectionPoint
        LoggingProducer producer = new LoggingProducer();
        Logger logger = producer.produceLogger(mockInjectionPoint);

        // Then a Logger object should be created and returned
        assertNotNull(logger);

        // And the Logger name should be equal to the name of the declaring class
        assertEquals("ValidClassName", logger.getName());
    }

    @Test
    public void testProduceLoggerNoClassNameInjectionPoint() {
        // Given an InjectionPoint with a member whose declaring class does not have a name
        InjectionPoint mockInjectionPoint = mock(InjectionPoint.class);
        when(mockInjectionPoint.getMember().getDeclaringClass().getName()).thenReturn("");

        // When the produceLogger method is called with this InjectionPoint
        LoggingProducer producer = new LoggingProducer();
        Logger logger = producer.produceLogger(mockInjectionPoint);

        // Then a Logger object should be created and returned
        assertNotNull(logger);

        // And the Logger name should be equal to the default Logger name ("global")
        assertEquals("global", logger.getName());
    }
}
