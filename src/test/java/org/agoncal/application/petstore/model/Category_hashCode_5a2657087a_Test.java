// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Test when 'name' is a non-empty string
   Description: The 'name' variable is a non-empty string. The expected result should be the hash code of the 'name'.

2. Scenario: Test when 'name' is an empty string
   Description: The 'name' variable is an empty string. Since the hash code of an empty string is 0, the expected result should be 0.

3. Scenario: Test when 'name' is null
   Description: The 'name' variable is null. Since the hash code of null is 0, the expected result should be 0.

4. Scenario: Test with different 'name' values
   Description: The 'name' variable is set to different string values. The expected result should be different hash codes for different 'name' values.

5. Scenario: Test with same 'name' values
   Description: The 'name' variable is set to the same string value in different instances. The expected result should be the same hash code for the same 'name' value.

6. Scenario: Test with 'name' containing special characters
   Description: The 'name' variable contains special characters. The expected result should be the hash code of the 'name'.

7. Scenario: Test with 'name' containing numbers
   Description: The 'name' variable contains numbers. The expected result should be the hash code of the 'name'.

8. Scenario: Test with 'name' containing both letters and numbers
   Description: The 'name' variable contains both letters and numbers. The expected result should be the hash code of the 'name'.

9. Scenario: Test with 'name' containing whitespaces
   Description: The 'name' variable contains whitespaces. The expected result should be the hash code of the 'name'.

10. Scenario: Test with 'name' containing Unicode characters
    Description: The 'name' variable contains Unicode characters. The expected result should be the hash code of the 'name'.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Category_hashCode_5a2657087a_Test {

    @Test
    public void testHashCode() {
        Category category1 = new Category("test", "description");
        Category category2 = new Category("test", "description");
        assertEquals(category1.hashCode(), category2.hashCode());

        category1 = new Category("", "description");
        category2 = new Category("", "description");
        assertEquals(category1.hashCode(), category2.hashCode());

        category1 = new Category(null, "description");
        category2 = new Category(null, "description");
        assertEquals(category1.hashCode(), category2.hashCode());

        category1 = new Category("test1", "description");
        category2 = new Category("test2", "description");
        assertNotEquals(category1.hashCode(), category2.hashCode());

        category1 = new Category("test", "description");
        category2 = new Category("test", "description");
        assertEquals(category1.hashCode(), category2.hashCode());

        category1 = new Category("!@#$$%^^&&*", "description");
        category2 = new Category("!@#$$%^^&&*", "description");
        assertEquals(category1.hashCode(), category2.hashCode());

        category1 = new Category("1234567890", "description");
        category2 = new Category("1234567890", "description");
        assertEquals(category1.hashCode(), category2.hashCode());

        category1 = new Category("test123", "description");
        category2 = new Category("test123", "description");
        assertEquals(category1.hashCode(), category2.hashCode());

        category1 = new Category(" test ", "description");
        category2 = new Category(" test ", "description");
        assertEquals(category1.hashCode(), category2.hashCode());

        category1 = new Category("тест", "description");
        category2 = new Category("тест", "description");
        assertEquals(category1.hashCode(), category2.hashCode());
    }
}
