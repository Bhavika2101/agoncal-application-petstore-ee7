// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
Here are some test scenarios to validate the hashCode function:

1. **Positive Scenario - Valid Input:** Pass valid 'orderDate' and 'customer' objects to the hashCode function. Ensure that the function returns the correct hash code.

2. **Negative Scenario - Null Input:** Pass null as 'orderDate' and 'customer' to the hashCode function. As per the Objects.hash() function specification, it should handle null inputs and return a hash code.

3. **Negative Scenario - Empty Input:** Pass empty 'orderDate' and 'customer' objects to the hashCode function. The function should still return a hash code, as the Objects.hash() function can handle empty inputs.

4. **Edge Case - Large Input:** Pass 'orderDate' and 'customer' objects with large amounts of data to the hashCode function. The function should not produce an error and should return a hash code.

5. **Edge Case - Small Input:** Pass 'orderDate' and 'customer' objects with minimal data to the hashCode function. The function should still return a hash code.

6. **Consistency Check:** Call the hashCode function multiple times with the same 'orderDate' and 'customer' objects. The function should return the same hash code each time, indicating that it is consistent.

7. **Uniqueness Check:** Call the hashCode function with different 'orderDate' and 'customer' objects. The function should return different hash codes, indicating that it provides unique hash codes for unique inputs.

8. **Thread Safety Check:** Call the hashCode function concurrently from multiple threads. The function should return correct and consistent hash codes, indicating that it is thread-safe.

9. **Performance Check:** Measure the time taken by the hashCode function to compute the hash code. The function should compute the hash code within a reasonable amount of time, indicating that it is performant.

10. **Memory Usage Check:** Monitor the memory usage of the hashCode function. The function should not use excessive memory, indicating that it is memory-efficient.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

public class PurchaseOrder_hashCode_5a2657087a_Test {

    private PurchaseOrder purchaseOrder1;
    private PurchaseOrder purchaseOrder2;
    private Customer customer;
    private Date date;

    @BeforeEach
    public void init() {
        customer = new Customer("John", "Doe", "johndoe", "password", "john.doe@example.com", new Address());
        date = new Date();
        purchaseOrder1 = new PurchaseOrder(customer, new CreditCard(), new Address());
        purchaseOrder1.setOrderDate(date);
        purchaseOrder2 = new PurchaseOrder(customer, new CreditCard(), new Address());
        purchaseOrder2.setOrderDate(date);
    }

    @Test
    @DisplayName("Test hashCode with valid input")
    public void testHashCodeWithValidInput() {
        assertEquals(purchaseOrder1.hashCode(), purchaseOrder2.hashCode());
    }

    @Test
    @DisplayName("Test hashCode with null input")
    public void testHashCodeWithNullInput() {
        purchaseOrder1.setOrderDate(null);
        purchaseOrder1.setCustomer(null);
        purchaseOrder2.setOrderDate(null);
        purchaseOrder2.setCustomer(null);
        assertEquals(purchaseOrder1.hashCode(), purchaseOrder2.hashCode());
    }

    @Test
    @DisplayName("Test hashCode uniqueness")
    public void testHashCodeUniqueness() {
        purchaseOrder2.setOrderDate(new Date());
        assertNotEquals(purchaseOrder1.hashCode(), purchaseOrder2.hashCode());
    }

    @Test
    @DisplayName("Test hashCode consistency")
    public void testHashCodeConsistency() {
        int hashCode1 = purchaseOrder1.hashCode();
        int hashCode2 = purchaseOrder1.hashCode();
        assertEquals(hashCode1, hashCode2);
    }
}
