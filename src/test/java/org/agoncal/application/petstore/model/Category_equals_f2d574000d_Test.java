// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: When the two objects reference the same instance
   - Given that we have two object references pointing to the same instance
   - When we invoke the equals method
   - Then it should return true

2. Scenario: When the object passed is null
   - Given that we have a non-null object
   - When we invoke the equals method with null as an argument
   - Then it should return false

3. Scenario: When the objects are of different classes
   - Given that we have two objects of different classes
   - When we invoke the equals method
   - Then it should return false

4. Scenario: When the objects are of the same class but have different names
   - Given that we have two objects of the same class but with different names
   - When we invoke the equals method
   - Then it should return false

5. Scenario: When the objects are of the same class and have the same name
   - Given that we have two objects of the same class and the same name
   - When we invoke the equals method
   - Then it should return true

6. Scenario: When the name of the category object is null
   - Given that we have a category object with a null name
   - When we invoke the equals method
   - Then it should throw a NullPointerException

7. Scenario: When the name of the current object is null
   - Given that the name of the current object is null
   - When we invoke the equals method with a category object having a non-null name
   - Then it should throw a NullPointerException
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class Category_equals_f2d574000d_Test {

    private Category category1;
    private Category category2;

    @BeforeEach
    public void setUp() {
        category1 = new Category("Name", "Description");
        category2 = new Category("Name", "Description");
    }

    @Test
    public void testEquals_sameInstance() {
        assertTrue(category1.equals(category1));
    }

    @Test
    public void testEquals_nullObject() {
        assertFalse(category1.equals(null));
    }

    @Test
    public void testEquals_differentClasses() {
        assertFalse(category1.equals(new Object()));
    }

    @Test
    public void testEquals_differentNames() {
        category2.setName("DifferentName");
        assertFalse(category1.equals(category2));
    }

    @Test
    public void testEquals_sameNames() {
        assertTrue(category1.equals(category2));
    }

    @Test
    public void testEquals_nullCategoryName() {
        category2.setName(null);
        assertThrows(NullPointerException.class, () -> category1.equals(category2));
    }

    @Test
    public void testEquals_nullCurrentObjectName() {
        category1.setName(null);
        assertThrows(NullPointerException.class, () -> category1.equals(category2));
    }
}
