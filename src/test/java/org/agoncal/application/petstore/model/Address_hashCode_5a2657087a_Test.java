// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Test with all fields (street1, city, zipcode) having valid non-null values. Expected result: The function should return a consistent hash code for the same values.

2. Scenario: Test with one of the fields (street1, city, zipcode) being null. Expected result: The function should handle the null value and return a consistent hash code.

3. Scenario: Test with all fields (street1, city, zipcode) being null. Expected result: The function should handle the null values and return a consistent hash code.

4. Scenario: Test with different objects having the same values for fields (street1, city, zipcode). Expected result: The function should return the same hash code for the objects with the same values.

5. Scenario: Test with different objects having different values for fields (street1, city, zipcode). Expected result: The function should return different hash codes for the objects with different values.

6. Scenario: Test with the same object being passed multiple times. Expected result: The function should return the same hash code every time.

7. Scenario: Test with special characters in the fields (street1, city, zipcode). Expected result: The function should handle special characters and return a consistent hash code.

8. Scenario: Test with non-string values in the fields (street1, city, zipcode). Expected result: The function should handle non-string values and return a consistent hash code.

9. Scenario: Test with large size values in the fields (street1, city, zipcode). Expected result: The function should be able to handle large size values and return a consistent hash code.

10. Scenario: Test with empty string values in the fields (street1, city, zipcode). Expected result: The function should handle empty string values and return a consistent hash code.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

public class Address_hashCode_5a2657087a_Test {

    @Test
    public void testHashCode() {

        // Scenario 1: Test with all fields (street1, city, zipcode) having valid non-null values.
        Address address1 = new Address("Street1", "City1", "Zip1", new Country());
        int hashCode1 = address1.hashCode();
        assertEquals(hashCode1, address1.hashCode());

        // Scenario 2: Test with one of the fields (street1, city, zipcode) being null.
        Address address2 = new Address(null, "City2", "Zip2", new Country());
        int hashCode2 = address2.hashCode();
        assertEquals(hashCode2, address2.hashCode());

        // Scenario 3: Test with all fields (street1, city, zipcode) being null.
        Address address3 = new Address(null, null, null, new Country());
        int hashCode3 = address3.hashCode();
        assertEquals(hashCode3, address3.hashCode());

        // Scenario 4: Test with different objects having the same values for fields (street1, city, zipcode).
        Address address4 = new Address("Street4", "City4", "Zip4", new Country());
        Address address5 = new Address("Street4", "City4", "Zip4", new Country());
        assertEquals(address4.hashCode(), address5.hashCode());

        // Scenario 5: Test with different objects having different values for fields (street1, city, zipcode).
        Address address6 = new Address("Street6", "City6", "Zip6", new Country());
        assertNotEquals(address1.hashCode(), address6.hashCode());

        // Scenario 6: Test with the same object being passed multiple times.
        assertEquals(address1.hashCode(), address1.hashCode());

        // Scenario 7: Test with special characters in the fields (street1, city, zipcode).
        Address address7 = new Address("@#$%", "^&*()", "!@#$%^", new Country());
        int hashCode7 = address7.hashCode();
        assertEquals(hashCode7, address7.hashCode());

        // Scenario 8: Test with non-string values in the fields (street1, city, zipcode).
        // This scenario is not applicable because the fields (street1, city, zipcode) only accept String values.

        // Scenario 9: Test with large size values in the fields (street1, city, zipcode).
        Address address8 = new Address("Street".repeat(1000), "City".repeat(1000), "Zip".repeat(1000), new Country());
        int hashCode8 = address8.hashCode();
        assertEquals(hashCode8, address8.hashCode());

        // Scenario 10: Test with empty string values in the fields (street1, city, zipcode).
        Address address9 = new Address("", "", "", new Country());
        int hashCode9 = address9.hashCode();
        assertEquals(hashCode9, address9.hashCode());
    }
}
