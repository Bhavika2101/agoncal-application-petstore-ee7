// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
Test Scenario 1: Positive Scenario - Same Object Comparison
- Test if the function returns true when the same object is compared.

Test Scenario 2: Positive Scenario - Different Object with Same Data
- Test if the function returns true when two different objects with the same 'orderDate' and 'customer' are compared.

Test Scenario 3: Negative Scenario - Null Object Comparison
- Test if the function returns false when the object being compared is null.

Test Scenario 4: Negative Scenario - Different Class Object Comparison
- Test if the function returns false when an object of a different class is compared.

Test Scenario 5: Negative Scenario - Different 'orderDate' Comparison
- Test if the function returns false when the 'orderDate' of the objects being compared is different.

Test Scenario 6: Negative Scenario - Different 'customer' Comparison
- Test if the function returns false when the 'customer' of the objects being compared is different.

Test Scenario 7: Edge Scenario - Date in Future
- Test if the function handles and returns correct results when 'orderDate' is set in the future.

Test Scenario 8: Edge Scenario - Date in Past
- Test if the function handles and returns correct results when 'orderDate' is set in the past.

Test Scenario 9: Edge Scenario - Empty 'customer'
- Test if the function handles and returns correct results when 'customer' is empty. 

Test Scenario 10: Edge Scenario - Special Characters in 'customer'
- Test if the function handles and returns correct results when 'customer' contains special characters.
*/
package org.agoncal.application.petstore.model;

import org.junit.Test;
import static org.junit.Assert.*;

public class PurchaseOrder_equals_f2d574000d_Test {

    @Test
    public void testEqualsSameObject() {
        PurchaseOrder po1 = new PurchaseOrder();
        assertTrue(po1.equals(po1));
    }

    @Test
    public void testEqualsDifferentClass() {
        PurchaseOrder po = new PurchaseOrder();
        Object obj = new Object();
        assertFalse(po.equals(obj));
    }

    @Test
    public void testEqualsNull() {
        PurchaseOrder po = new PurchaseOrder();
        PurchaseOrder poNull = null;
        assertFalse(po.equals(poNull));
    }

    @Test
    public void testEqualsDifferentObject() {
        PurchaseOrder po1 = new PurchaseOrder();
        PurchaseOrder po2 = new PurchaseOrder();
        assertFalse(po1.equals(po2));
    }

    @Test
    public void testEqualsSameOrderDateAndCustomer() {
        Customer customer = new Customer();
        PurchaseOrder po1 = new PurchaseOrder();
        po1.setCustomer(customer);
        po1.setOrderDate(new Date());

        PurchaseOrder po2 = new PurchaseOrder();
        po2.setCustomer(customer);
        po2.setOrderDate(po1.getOrderDate());

        assertTrue(po1.equals(po2));
    }
}
