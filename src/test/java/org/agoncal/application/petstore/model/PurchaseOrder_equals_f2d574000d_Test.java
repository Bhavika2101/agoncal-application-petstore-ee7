// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Test Scenario: Check if the method returns true when the object compared with itself.
   - Description: The equals method should return true when an object is compared with itself. This is to validate the reflexive property of the equals method.

2. Test Scenario: Check if the method returns false when the object is compared with null.
   - Description: The equals method should return false when an object is compared with null. This is to validate the non-nullity property of the equals method.
   
3. Test Scenario: Check if the method returns false when the object is compared with an object of a different class.
   - Description: The equals method should return false when an object is compared with an object of a different class. This is to validate the property that objects of different classes cannot be equal.

4. Test Scenario: Check if the method returns true when two objects of the same class have the same orderDate and customer.
   - Description: The equals method should return true when two objects of the same class have the same orderDate and customer. This is to validate the property that two objects are equal if their significant fields have the same values.

5. Test Scenario: Check if the method returns false when two objects of the same class have different orderDates.
   - Description: The equals method should return false when two objects of the same class have different orderDates. This is to validate the property that two objects are not equal if any of their significant fields have different values.

6. Test Scenario: Check if the method returns false when two objects of the same class have different customers.
   - Description: The equals method should return false when two objects of the same class have different customers. This is to validate the property that two objects are not equal if any of their significant fields have different values.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

public class PurchaseOrder_equals_f2d574000d_Test {

    private PurchaseOrder purchaseOrder1;
    private PurchaseOrder purchaseOrder2;
    private Date date;
    private Customer customer;

    @BeforeEach
    public void setUp() {
        date = new Date();
        customer = new Customer();
        purchaseOrder1 = new PurchaseOrder();
        purchaseOrder1.setOrderDate(date);
        purchaseOrder1.setCustomer(customer);
    }

    @Test
    public void testEqualsWithItself() {
        assertTrue(purchaseOrder1.equals(purchaseOrder1));
    }

    @Test
    public void testEqualsWithNull() {
        assertFalse(purchaseOrder1.equals(null));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        assertFalse(purchaseOrder1.equals(new Object()));
    }

    @Test
    public void testEqualsWithSameOrderDateAndCustomer() {
        purchaseOrder2 = new PurchaseOrder();
        purchaseOrder2.setOrderDate(date);
        purchaseOrder2.setCustomer(customer);
        assertTrue(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void testEqualsWithDifferentOrderDates() {
        purchaseOrder2 = new PurchaseOrder();
        purchaseOrder2.setOrderDate(new Date());
        purchaseOrder2.setCustomer(customer);
        assertFalse(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void testEqualsWithDifferentCustomers() {
        purchaseOrder2 = new PurchaseOrder();
        purchaseOrder2.setOrderDate(date);
        purchaseOrder2.setCustomer(new Customer());
        assertFalse(purchaseOrder1.equals(purchaseOrder2));
    }
}
