// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Verify that the hashCode() function returns the same hash for the same login.
    - Given a login
    - When the hashCode() function is called with this login
    - Then the hashCode() function should return the same hash each time it is called with this login.

2. Scenario: Verify that the hashCode() function returns different hashes for different logins.
    - Given two different logins
    - When the hashCode() function is called with these logins
    - Then the hashCode() function should return different hashes for each login.

3. Scenario: Verify that the hashCode() function returns a consistent hash for the same login, even across different instances of the application.
    - Given a login
    - When the hashCode() function is called with this login in different instances of the application
    - Then the hashCode() function should return the same hash each time it is called with this login in different instances.

4. Scenario: Verify that the hashCode() function handles null login gracefully.
    - Given a null login
    - When the hashCode() function is called with this login
    - Then the hashCode() function should handle it gracefully and not throw a NullPointerException.

5. Scenario: Verify that the hashCode() function returns a non-zero integer for a valid login.
    - Given a valid login
    - When the hashCode() function is called with this login
    - Then the hashCode() function should return a non-zero integer.

6. Scenario: Verify that the hashCode() function returns zero for an empty login.
    - Given an empty login
    - When the hashCode() function is called with this login
    - Then the hashCode() function should return zero.

7. Scenario: Verify that the hashCode() function returns the same hash for the same login, regardless of case.
    - Given a login and the same login in a different case
    - When the hashCode() function is called with these logins
    - Then the hashCode() function should return the same hash for both logins.
*/
import org.agoncal.application.petstore.model.Customer;
import org.junit.Before;
import org.junit.Test;
import java.util.Objects;

import static org.junit.Assert.assertEquals;

public class Customer_hashCode_5a2657087a_Test {

    private Customer customer;

    @Before
    public void setUp() {
        customer = new Customer();
    }

    @Test
    public void testHashCodeWithSameLogin() {
        String login = "testLogin";
        customer.setLogin(login);

        Customer anotherCustomer = new Customer();
        anotherCustomer.setLogin(login);

        assertEquals(customer.hashCode(), anotherCustomer.hashCode());
    }

    @Test
    public void testHashCodeWithDifferentLogin() {
        customer.setLogin("testLogin");

        Customer anotherCustomer = new Customer();
        anotherCustomer.setLogin("differentLogin");

        assertNotEquals(customer.hashCode(), anotherCustomer.hashCode());
    }
}
