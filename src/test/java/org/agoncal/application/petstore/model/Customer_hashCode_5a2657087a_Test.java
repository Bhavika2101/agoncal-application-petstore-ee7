// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
Test Scenario 1: Valid Login Input
- Description: This scenario tests the function with a valid login input.
- Test Steps: 
  1. Create a new object with a valid login.
  2. Call the hashCode() function.
- Expected Result: The function should return a unique hash value for the login.

Test Scenario 2: Null Login Input
- Description: This scenario tests the function with a null login input.
- Test Steps: 
  1. Create a new object with a null login.
  2. Call the hashCode() function.
- Expected Result: The function should return 0 as the hash value because the login is null.

Test Scenario 3: Same Login Inputs
- Description: This scenario tests the function with two objects having the same login input.
- Test Steps: 
  1. Create two new objects with the same login.
  2. Call the hashCode() function for both objects.
- Expected Result: The function should return the same hash value for both objects as their login is the same.

Test Scenario 4: Different Login Inputs
- Description: This scenario tests the function with two objects having different login inputs.
- Test Steps: 
  1. Create two new objects with different logins.
  2. Call the hashCode() function for both objects.
- Expected Result: The function should return different hash values for both objects as their login is different.

Test Scenario 5: Empty Login Input
- Description: This scenario tests the function with an empty login input.
- Test Steps: 
  1. Create a new object with an empty login.
  2. Call the hashCode() function.
- Expected Result: The function should return a unique hash value for the empty login.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Customer_hashCode_5a2657087a_Test {

  private Customer customer;

  @BeforeEach
  public void setup() {
    customer = new Customer();
  }

  @Test
  public void testHashCodeWithValidLogin() {
    String login = "testLogin";
    customer.setLogin(login);
    int expectedHashCode = Objects.hash(login);
    assertEquals(expectedHashCode, customer.hashCode());
  }

  @Test
  public void testHashCodeWithNullLogin() {
    customer.setLogin(null);
    int expectedHashCode = Objects.hash((Object) null);
    assertEquals(expectedHashCode, customer.hashCode());
  }

  @Test
  public void testHashCodeWithSameLogin() {
    String login = "testLogin";
    Customer customer1 = new Customer();
    customer1.setLogin(login);
    Customer customer2 = new Customer();
    customer2.setLogin(login);
    assertEquals(customer1.hashCode(), customer2.hashCode());
  }

  @Test
  public void testHashCodeWithDifferentLogin() {
    String login1 = "testLogin1";
    String login2 = "testLogin2";
    Customer customer1 = new Customer();
    customer1.setLogin(login1);
    Customer customer2 = new Customer();
    customer2.setLogin(login2);
    assertEquals(Objects.hash(login1), customer1.hashCode());
    assertEquals(Objects.hash(login2), customer2.hashCode());
  }

  @Test
  public void testHashCodeWithEmptyLogin() {
    String login = "";
    customer.setLogin(login);
    int expectedHashCode = Objects.hash(login);
    assertEquals(expectedHashCode, customer.hashCode());
  }
}
