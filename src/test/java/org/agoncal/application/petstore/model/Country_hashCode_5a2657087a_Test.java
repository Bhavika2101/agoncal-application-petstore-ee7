// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
Test Scenario 1: Validate the hashCode function for different isoCode values
- Test Case 1.1: Provide a valid isoCode and check if hashCode function returns a valid hash code.
- Test Case 1.2: Provide different valid isoCode values and check if hashCode function returns different hash codes for different isoCode values.

Test Scenario 2: Validate the hashCode function for null isoCode values
- Test Case 2.1: Provide a null isoCode and check if hashCode function handles null values and doesn't throw NullPointerException.

Test Scenario 3: Validate the hashCode function for empty isoCode values
- Test Case 3.1: Provide an empty string as isoCode and check if hashCode function returns a valid hash code.

Test Scenario 4: Validate the hashCode function for long isoCode values
- Test Case 4.1: Provide a long string as isoCode and check if hashCode function handles it and returns a valid hash code.

Test Scenario 5: Validate the hashCode function for isoCode values with special characters
- Test Case 5.1: Provide an isoCode with special characters and check if hashCode function handles it and returns a valid hash code.

Test Scenario 6: Validate the hashCode function for isoCode values with spaces
- Test Case 6.1: Provide an isoCode with spaces and check if hashCode function handles it and returns a valid hash code.

Test Scenario 7: Validate the hashCode function for isoCode values with numeric characters
- Test Case 7.1: Provide an isoCode with numeric characters and check if hashCode function handles it and returns a valid hash code.
*/
package org.agoncal.application.petstore.model;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Country_hashCode_5a2657087a_Test {

    @Test
    public void testHashCode() {
        Country country1 = new Country("IN", "India", "Republic of India", "IND", "356");
        Country country2 = new Country("IN", "India", "Republic of India", "IND", "356");
        Country country3 = new Country("US", "United States", "United States of America", "USA", "840");

        // Testing when the isoCodes are the same
        assertEquals(country1.hashCode(), country2.hashCode());

        // Testing when the isoCodes are different
        assertNotEquals(country1.hashCode(), country3.hashCode());
    }
}
