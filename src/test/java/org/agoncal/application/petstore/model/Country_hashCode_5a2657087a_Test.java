// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Test Scenario: Validate that the hashCode function returns the correct hash value for a given isoCode.
2. Test Scenario: Validate that the hashCode function returns a unique hash value for different isoCodes.
3. Test Scenario: Validate that the hashCode function returns the same hash value for the same isoCode when called multiple times.
4. Test Scenario: Validate that the hashCode function returns different hash values for isoCodes that are similar but not exactly the same.
5. Test Scenario: Validate that the hashCode function returns a non-zero hash value for a non-null isoCode.
6. Test Scenario: Validate that the hashCode function handles null isoCodes without throwing an exception.
7. Test Scenario: Validate that the hashCode function returns zero for a null isoCode.
8. Test Scenario: Validate that the hashCode function does not throw any unexpected exceptions during its execution.
9. Test Scenario: Validate that the hashCode function can handle long isoCodes without any performance degradation.
10. Test Scenario: Validate that the hashCode function can handle isoCodes made up of special characters and it's able to generate a unique hash for them.
11. Test Scenario: Validate that the hashCode function handles isoCodes made up of mixed cases (upper and lower) and it's able to generate a unique hash for them.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Country_hashCode_5a2657087a_Test {

    @Test
    public void testHashCode() {
        Country country1 = new Country("US", "United States", "United States of America", "USA", "840");
        Country country2 = new Country("US", "United States", "United States of America", "USA", "840");
        Country country3 = new Country("CA", "Canada", "Canada", "CAN", "124");
        Country country4 = new Country("US1", "United States", "United States of America", "USA", "840");
        Country country5 = new Country(null, "United States", "United States of America", "USA", "840");
        Country country6 = new Country("US$", "United States", "United States of America", "USA", "840");
        Country country7 = new Country("us", "United States", "United States of America", "USA", "840");

        // Validate that the hashCode function returns the correct hash value for a given isoCode.
        assertEquals(country1.hashCode(), Objects.hash("US"));

        // Validate that the hashCode function returns a unique hash value for different isoCodes.
        assertNotEquals(country1.hashCode(), country3.hashCode());

        // Validate that the hashCode function returns the same hash value for the same isoCode when called multiple times.
        assertEquals(country1.hashCode(), country2.hashCode());

        // Validate that the hashCode function returns different hash values for isoCodes that are similar but not exactly the same.
        assertNotEquals(country1.hashCode(), country4.hashCode());

        // Validate that the hashCode function returns a non-zero hash value for a non-null isoCode.
        assertNotEquals(country1.hashCode(), 0);

        // Validate that the hashCode function handles null isoCodes without throwing an exception.
        assertDoesNotThrow(() -> country5.hashCode());

        // Validate that the hashCode function returns zero for a null isoCode.
        assertEquals(country5.hashCode(), 0);

        // Validate that the hashCode function does not throw any unexpected exceptions during its execution.
        assertDoesNotThrow(() -> country1.hashCode());

        // Validate that the hashCode function can handle long isoCodes without any performance degradation.
        Country countryLongIsoCode = new Country("123456789012345678901234567890", "Long IsoCode Country", "Long IsoCode Country", "LIC", "999");
        assertDoesNotThrow(() -> countryLongIsoCode.hashCode());

        // Validate that the hashCode function can handle isoCodes made up of special characters and it's able to generate a unique hash for them.
        assertNotEquals(country1.hashCode(), country6.hashCode());

        // Validate that the hashCode function handles isoCodes made up of mixed cases (upper and lower) and it's able to generate a unique hash for them.
        assertNotEquals(country1.hashCode(), country7.hashCode());
    }
}
