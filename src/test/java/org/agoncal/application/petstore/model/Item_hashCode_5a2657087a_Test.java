// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Test when both 'name' and 'description' are null
   - Expected outcome: The hashCode function should return 0 as both inputs are null.

2. Scenario: Test when only 'name' is null and 'description' is not null
   - Expected outcome: The hashCode function should return the hashCode of the description.

3. Scenario: Test when 'name' is not null and 'description' is null
   - Expected outcome: The hashCode function should return the hashCode of the name.

4. Scenario: Test when 'name' and 'description' are not null
   - Expected outcome: The hashCode function should return a hashCode that is a combination of the hashCodes of name and description.

5. Scenario: Test when 'name' and 'description' are empty strings
   - Expected outcome: The hashCode function should return a hashCode that is a combination of the hashCodes of empty name and description.

6. Scenario: Test when 'name' is an empty string and 'description' is not an empty string
   - Expected outcome: The hashCode function should return the hashCode of the description.

7. Scenario: Test when 'name' is not an empty string and 'description' is an empty string
   - Expected outcome: The hashCode function should return the hashCode of the name.

8. Scenario: Test when 'name' and 'description' are the same non-empty strings
   - Expected outcome: The hashCode function should return a hashCode that is a combination of the hashCodes of name and description, which should be the same.

9. Scenario: Test when 'name' and 'description' are the same but one has additional white spaces
   - Expected outcome: The hashCode function should return different hashCodes as the strings are not exactly the same.

10. Scenario: Test when 'name' and 'description' are long strings
    - Expected outcome: The hashCode function should return a hashCode without any errors or exceptions.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Item_hashCode_5a2657087a_Test {

    @Test
    public void testHashCodeBothNull() {
        Item item = new Item();
        item.setName(null);
        item.setDescription(null);
        assertEquals(0, item.hashCode());
    }

    @Test
    public void testHashCodeNameNull() {
        Item item = new Item();
        item.setName(null);
        item.setDescription("description");
        assertEquals("description".hashCode(), item.hashCode());
    }

    @Test
    public void testHashCodeDescriptionNull() {
        Item item = new Item();
        item.setName("name");
        item.setDescription(null);
        assertEquals("name".hashCode(), item.hashCode());
    }

    @Test
    public void testHashCodeBothNotNull() {
        Item item = new Item();
        item.setName("name");
        item.setDescription("description");
        assertEquals(Objects.hash("name", "description"), item.hashCode());
    }

    @Test
    public void testHashCodeBothEmpty() {
        Item item = new Item();
        item.setName("");
        item.setDescription("");
        assertEquals(Objects.hash("", ""), item.hashCode());
    }

    @Test
    public void testHashCodeNameEmpty() {
        Item item = new Item();
        item.setName("");
        item.setDescription("description");
        assertEquals("description".hashCode(), item.hashCode());
    }

    @Test
    public void testHashCodeDescriptionEmpty() {
        Item item = new Item();
        item.setName("name");
        item.setDescription("");
        assertEquals("name".hashCode(), item.hashCode());
    }

    @Test
    public void testHashCodeSameNonEmpty() {
        Item item = new Item();
        item.setName("name");
        item.setDescription("name");
        assertEquals(Objects.hash("name", "name"), item.hashCode());
    }

    @Test
    public void testHashCodeSameWithSpaces() {
        Item item = new Item();
        item.setName("name ");
        item.setDescription("name");
        assertNotEquals(Objects.hash("name ", "name"), item.hashCode());
    }

    @Test
    public void testHashCodeLongStrings() {
        Item item = new Item();
        item.setName("name".repeat(10000));
        item.setDescription("description".repeat(10000));
        assertEquals(Objects.hash("name".repeat(10000), "description".repeat(10000)), item.hashCode());
    }
}
