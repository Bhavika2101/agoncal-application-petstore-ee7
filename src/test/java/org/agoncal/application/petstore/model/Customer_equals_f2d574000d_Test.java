// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Test with the same object.
   Given the same instance of the Customer object, the equals method should return true. 

2. Scenario: Test with null object.
   Given a null object, the equals method should return false.

3. Scenario: Test with a different class object.
   Given an instance of a different class, the equals method should return false.

4. Scenario: Test with the same class but different login.
   Given another instance of the Customer class with a different login, the equals method should return false.

5. Scenario: Test with the same class and same login.
   Given another instance of the Customer class with the same login, the equals method should return true.

6. Scenario: Test with the customer object having null login.
   Given an instance of the Customer class with null login, the equals method should handle null pointer exception and return false.

7. Scenario: Test with the current object having null login.
   Given the current object with null login and other instance of the Customer with non-null login, the equals method should handle null pointer exception and return false.

8. Scenario: Test with both the current object and the customer object having null login.
   Given both the current object and other instance of the Customer with null login, the equals method should handle null pointer exception and return true (based on business logic).
*/
package org.agoncal.application.petstore.model;

import org.junit.Test;
import static org.junit.Assert.*;

public class Customer_equals_f2d574000d_Test {

    @Test
    public void testEqualsSameObject() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        assertTrue(customer1.equals(customer1));
    }

    @Test
    public void testEqualsWithNull() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        assertFalse(customer1.equals(null));
    }

    @Test
    public void testEqualsDifferentClass() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        assertFalse(customer1.equals(new String("Test")));
    }

    @Test
    public void testEqualsSameClassDifferentLogin() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        Customer customer2 = new Customer("Jane", "Doe", "jdoe1", "password", "jdoe1@example.com", new Address());
        assertFalse(customer1.equals(customer2));
    }

    @Test
    public void testEqualsSameClassSameLogin() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        Customer customer2 = new Customer("Jane", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        assertTrue(customer1.equals(customer2));
    }

    @Test
    public void testEqualsWithNullLogin() {
        Customer customer1 = new Customer("John", "Doe", null, "password", "jdoe@example.com", new Address());
        Customer customer2 = new Customer("Jane", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        assertFalse(customer1.equals(customer2));
    }

    @Test
    public void testEqualsWithCurrentObjectNullLogin() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        Customer customer2 = new Customer("Jane", "Doe", null, "password", "jdoe@example.com", new Address());
        assertFalse(customer1.equals(customer2));
    }

    @Test
    public void testEqualsBothObjectNullLogin() {
        Customer customer1 = new Customer("John", "Doe", null, "password", "jdoe@example.com", new Address());
        Customer customer2 = new Customer("Jane", "Doe", null, "password", "jdoe@example.com", new Address());
        assertTrue(customer1.equals(customer2));
    }
}
