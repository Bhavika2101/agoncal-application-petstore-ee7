// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
1. Scenario: Check if hashCode function returns unique hash code for different object instances.
   - Prepare two different instances of the object with different values for 'quantity' and 'item'.
   - Call the hashCode function on both instances and compare the results.
   - Expected: The hash codes of the two instances should be different.

2. Scenario: Check if hashCode function returns the same hash code for same object instance.
   - Prepare an instance of the object.
   - Call the hashCode function on the same instance twice and compare the results.
   - Expected: The hash codes of the same instance should be identical.

3. Scenario: Check if hashCode function returns the same hash code for two identical object instances.
   - Prepare two instances of the object with the same values for 'quantity' and 'item'.
   - Call the hashCode function on both instances and compare the results.
   - Expected: The hash codes of the two identical instances should be the same.

4. Scenario: Check if hashCode function handles null values correctly.
   - Prepare an instance of the object with null values for 'quantity' and 'item'.
   - Call the hashCode function on the instance.
   - Expected: The function should return a valid hash code without throwing an exception.

5. Scenario: Check if the hashCode function handles negative values correctly.
   - Prepare an instance of the object with negative value for 'quantity' and valid 'item'.
   - Call the hashCode function on the instance.
   - Expected: The function should return a valid hash code without throwing an exception.

6. Scenario: Check if hashCode function handles zero values correctly.
   - Prepare an instance of the object with zero value for 'quantity' and valid 'item'.
   - Call the hashCode function on the instance.
   - Expected: The function should return a valid hash code without throwing an exception.

7. Scenario: Check if hashCode function handles large values correctly.
   - Prepare an instance of the object with large values for 'quantity' and 'item'.
   - Call the hashCode function on the instance.
   - Expected: The function should return a valid hash code without throwing an exception.

8. Scenario: Check if hashCode function handles different data types correctly.
   - Prepare instances of the object with different data types for 'quantity' and 'item'.
   - Call the hashCode function on each instance.
   - Expected: The function should return a valid hash code for each instance without throwing an exception.
*/
package org.agoncal.application.petstore.model;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class OrderLine_hashCode_5a2657087a_Test {

    private OrderLine orderLine1;
    private OrderLine orderLine2;
    private Item item1;
    private Item item2;

    @Before
    public void setUp() {
        item1 = new Item();
        item1.setId(1L);
        item1.setName("Item1");
        item1.setUnitCost(10.0f);

        item2 = new Item();
        item2.setId(2L);
        item2.setName("Item2");
        item2.setUnitCost(20.0f);

        orderLine1 = new OrderLine(5, item1);
        orderLine2 = new OrderLine(5, item1);
    }

    @Test
    public void testHashCodeSameObject() {
        int hashCode1 = orderLine1.hashCode();
        int hashCode2 = orderLine1.hashCode();
        assertEquals(hashCode1, hashCode2);
    }

    @Test
    public void testHashCodeDifferentObjectSameData() {
        int hashCode1 = orderLine1.hashCode();
        int hashCode2 = orderLine2.hashCode();
        assertEquals(hashCode1, hashCode2);
    }

    @Test
    public void testHashCodeDifferentData() {
        orderLine2.setItem(item2);
        int hashCode1 = orderLine1.hashCode();
        int hashCode2 = orderLine2.hashCode();
        assertNotEquals(hashCode1, hashCode2);
    }
}
