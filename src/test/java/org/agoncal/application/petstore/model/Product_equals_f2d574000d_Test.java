// Test generated by RoostGPT for test java-scenario-test using AI Type Open AI and AI Model gpt-4

/*
Test Scenario 1: 
Test the equals() method with two exactly the same Product objects. The method should return true.

Test Scenario 2: 
Test the equals() method with two Product objects that have the same name and description but are different instances. The method should return true.

Test Scenario 3: 
Test the equals() method with two Product objects that have different names but the same description. The method should return false.

Test Scenario 4: 
Test the equals() method with two Product objects that have the same name but different descriptions. The method should return false.

Test Scenario 5: 
Test the equals() method with a Product object and a null. The method should return false.

Test Scenario 6: 
Test the equals() method with a Product object and an object of a different class. The method should return false.

Test Scenario 7: 
Test the equals() method with a Product object and itself. The method should return true.

Test Scenario 8: 
Test the equals() method with two Product objects that both have null values for name and description. The method should return true.

Test Scenario 9: 
Test the equals() method with two Product objects where one has a null value for name and the other does not. The method should return false.

Test Scenario 10: 
Test the equals() method with two Product objects where one has a null value for description and the other does not. The method should return false.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Product_equals_f2d574000d_Test {

    @Test
    public void testEqualsMethodWithSameObject() {
        Category category = new Category("Category1", "Category Description 1");
        Product product1 = new Product("Product1", "Product Description 1", category);
        
        assertTrue(product1.equals(product1));
    }

    @Test
    public void testEqualsMethodWithDifferentObject() {
        Category category = new Category("Category1", "Category Description 1");
        Product product1 = new Product("Product1", "Product Description 1", category);
        Product product2 = new Product("Product2", "Product Description 2", category);

        assertFalse(product1.equals(product2));
    }

    @Test
    public void testEqualsMethodWithNullObject() {
        Category category = new Category("Category1", "Category Description 1");
        Product product1 = new Product("Product1", "Product Description 1", category);

        assertFalse(product1.equals(null));
    }

    @Test
    public void testEqualsMethodWithDifferentClassObject() {
        Category category = new Category("Category1", "Category Description 1");
        Product product1 = new Product("Product1", "Product Description 1", category);

        assertFalse(product1.equals(category));
    }
}
