// ********RoostGPT********
/*
Test generated by RoostGPT for test java-rest-assued using AI Type Open AI and AI Model gpt-4

Test generated for /countries_get for http method type GET in rest-assured framework

RoostTestHash=a284482418


*/

// ********RoostGPT********
package org.agoncal.application.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;

public class countriesGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {""};
      envList = dataloader.load("src/test/java/org/agoncal/application/RoostTest/countriesGetTest.csv", envVarsList);
    }

  
    @Test  
    public void countriesGet_Test() {
        this.setUp();
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "http://localhost:8080/applicationPetstore/rest";  
  
                Response responseObj = given()
				.queryParam("start", testData.get("start") != null ? testData.get("start") : "")
				.queryParam("max", testData.get("max") != null ? testData.get("max") : "")
                .when()
                .get("/countries")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else {  
                response = responseObj.jsonPath(); 
              }  
         
                if (responseObj.statusCode() == 200) {  
            JSONArray respoJsonArray = new JSONArray(responseObj.asString());  
  
            for (int it = 0; it < respoJsonArray.length(); it++) {  
              response = new JsonPath(respoJsonArray.getJSONObject(it).toString());  
                    
              if (response.get("id") != null) {  
                MatcherAssert.assertThat(response.get("id"), instanceOf(Integer.class));  
          }
      
              if (response.get("version") != null) {  
                MatcherAssert.assertThat(response.get("version"), instanceOf(Integer.class));  
          }
      
              if (response.get("isoCode") != null) {  
                MatcherAssert.assertThat(response.get("isoCode"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.getString("isoCode").length(), lessThanOrEqualTo(2));
  
                MatcherAssert.assertThat(response.getString("isoCode").length(), greaterThanOrEqualTo(2));
  
          }
      
              if (response.get("name") != null) {  
                MatcherAssert.assertThat(response.get("name"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.getString("name").length(), lessThanOrEqualTo(80));
  
                MatcherAssert.assertThat(response.getString("name").length(), greaterThanOrEqualTo(2));
  
          }
      
              if (response.get("printableName") != null) {  
                MatcherAssert.assertThat(response.get("printableName"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.getString("printableName").length(), lessThanOrEqualTo(80));
  
                MatcherAssert.assertThat(response.getString("printableName").length(), greaterThanOrEqualTo(2));
  
          }
      
              if (response.get("iso3") != null) {  
                MatcherAssert.assertThat(response.get("iso3"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.getString("iso3").length(), lessThanOrEqualTo(3));
  
                MatcherAssert.assertThat(response.getString("iso3").length(), greaterThanOrEqualTo(3));
  
          }
      
              if (response.get("numcode") != null) {  
                MatcherAssert.assertThat(response.get("numcode"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.getString("numcode").length(), lessThanOrEqualTo(3));
  
                MatcherAssert.assertThat(response.getString("numcode").length(), greaterThanOrEqualTo(3));
  
          }

            }  
          }
  
            }  
    }
}
